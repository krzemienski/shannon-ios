name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_ui_tests:
        description: 'Run UI tests'
        required: false
        default: false
        type: boolean
      run_security_scan:
        description: 'Run security scan'
        required: false
        default: true
        type: boolean

env:
  XCODE_VERSION: '15.2'
  IOS_VERSION: '17.0'
  SIMULATOR_NAME: 'iPhone 16 Pro Max'
  SIMULATOR_UUID: 'A707456B-44DB-472F-9722-C88153CDFFA1'

jobs:
  build-and-test:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.brew
          ~/.gem
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-deps-${{ hashFiles('project.yml', 'Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps-
    
    - name: Install dependencies
      run: |
        brew install xcodegen xcbeautify swiftlint periphery sourcedocs
        gem install xcov jazzy fastlane
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Validate project configuration
      run: |
        xcodegen generate --spec project.yml
        ./Scripts/quality_checks.sh validate-project
        
    - name: Build for testing
      run: |
        set -o pipefail
        xcodebuild build-for-testing \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build \
          -configuration Debug \
          -enableCodeCoverage YES \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          | xcbeautify --renderer github-actions
          
    - name: Run unit tests
      run: |
        set -o pipefail
        xcodebuild test-without-building \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build \
          -testPlan ClaudeCodeTests \
          -enableCodeCoverage YES \
          -resultBundlePath test-results/unit-tests.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Run UI tests
      if: github.event.inputs.run_ui_tests == 'true' || github.ref == 'refs/heads/main'
      run: |
        set -o pipefail
        xcodebuild test-without-building \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -testPlan ClaudeCodeUITests \
          -resultBundlePath test-results/ui-tests.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Generate coverage report
      run: |
        xcov \
          --project ClaudeCode.xcodeproj \
          --scheme ClaudeCode \
          --output_directory coverage \
          --derived_data_path build \
          --minimum_coverage_percentage 75 \
          --include_test_targets false
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: test-results/
        retention-days: 30
        
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ github.run_number }}
        path: coverage/
        retention-days: 30
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'coverage/index.html';
          if (fs.existsSync(path)) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ“Š Code coverage report has been generated and uploaded as an artifact.'
            });
          }
        
    - name: Run SwiftLint
      run: |
        swiftlint --reporter github-actions-logging --config .swiftlint.yml
        
    - name: Run quality checks
      run: |
        ./Scripts/quality_checks.sh all --ci
        
    - name: Check build performance
      run: |
        ./Scripts/quality_checks.sh build-performance
      
  static-analysis:
    runs-on: macos-14
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.brew
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-analysis-${{ hashFiles('project.yml') }}
        restore-keys: |
          ${{ runner.os }}-analysis-
      
    - name: Install tools
      run: |
        brew install xcodegen swiftlint periphery sonar-scanner
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Run static analysis
      run: |
        set -o pipefail
        xcodebuild analyze \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build \
          CLANG_ANALYZER_SECURITY_FLOATLOOPCOUNTER=YES \
          CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND=YES \
          CLANG_ANALYZER_SECURITY_KEYCHAIN_API=YES \
          CLANG_ANALYZER_SECURITY_INSECUREAPI_STRCPY=YES \
          | xcbeautify --renderer github-actions
          
    - name: Check for unused code
      run: |
        periphery scan \
          --project ClaudeCode.xcodeproj \
          --schemes ClaudeCode \
          --targets ClaudeCode \
          --format github-actions \
          --disable-update-check
          
    - name: Run security scan
      if: github.event.inputs.run_security_scan == 'true' || github.ref == 'refs/heads/main'
      run: |
        ./Scripts/security_audit.sh --ci
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-${{ github.run_number }}
        path: |
          build/Logs/
          security-report.json
        retention-days: 30
          
  documentation:
    runs-on: macos-14
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Install documentation tools
      run: |
        brew install xcodegen sourcedocs
        gem install jazzy
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Generate API documentation
      run: |
        jazzy \
          --clean \
          --author "Claude Code Team" \
          --author_url https://github.com/claudecode \
          --github_url https://github.com/claudecode/ios \
          --module ClaudeCode \
          --output docs/api \
          --theme fullwidth \
          --source-directory Sources \
          --readme README.md \
          --documentation "Documentation/*.md"
          
    - name: Generate technical documentation
      run: |
        ./Scripts/documentation.sh generate --format html --output docs/technical
        
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.run_number }}
        path: docs/
        retention-days: 90
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        
  performance-test:
    runs-on: macos-14
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'performance')
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Install dependencies
      run: |
        brew install xcodegen xcbeautify
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Run performance tests
      run: |
        set -o pipefail
        xcodebuild test \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -testPlan PerformanceTests \
          -derivedDataPath build \
          -resultBundlePath test-results/performance.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results-${{ github.run_number }}
        path: test-results/performance.xcresult
        retention-days: 30