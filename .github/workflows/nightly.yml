name: Nightly Builds

on:
  schedule:
    # Run at 2 AM UTC every day (6 PM PST / 7 PM PDT)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of nightly build'
        required: true
        type: choice
        options:
          - development
          - beta
          - release-candidate
        default: development
      run_full_suite:
        description: 'Run full test suite including UI tests'
        required: false
        default: true
        type: boolean
      deploy_to_testflight:
        description: 'Deploy to TestFlight after successful build'
        required: false
        default: false
        type: boolean

env:
  XCODE_VERSION: '15.2'
  SIMULATOR_UUID: 'A707456B-44DB-472F-9722-C88153CDFFA1'
  FASTLANE_SKIP_UPDATE_CHECK: true
  FASTLANE_HIDE_CHANGELOG: true

jobs:
  prepare-build:
    runs-on: macos-14
    outputs:
      build-number: ${{ steps.version.outputs.build-number }}
      version: ${{ steps.version.outputs.version }}
      build-date: ${{ steps.version.outputs.build-date }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version calculation
        
    - name: Calculate version and build number
      id: version
      run: |
        BUILD_DATE=$(date +%Y%m%d)
        BUILD_TIME=$(date +%H%M)
        BUILD_NUMBER="${BUILD_DATE}${BUILD_TIME}"
        
        # Get current version from project.yml
        VERSION=$(grep 'MARKETING_VERSION:' project.yml | sed 's/.*MARKETING_VERSION: //')
        
        # For nightly builds, append build info
        if [ "${{ github.event.inputs.build_type }}" == "development" ] || [ "${{ github.event_name }}" == "schedule" ]; then
          VERSION="${VERSION}-nightly.${BUILD_DATE}"
        elif [ "${{ github.event.inputs.build_type }}" == "beta" ]; then
          VERSION="${VERSION}-beta.${BUILD_DATE}"
        elif [ "${{ github.event.inputs.build_type }}" == "release-candidate" ]; then
          VERSION="${VERSION}-rc.${BUILD_DATE}"
        fi
        
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        
        echo "Build Number: ${BUILD_NUMBER}"
        echo "Version: ${VERSION}"

  nightly-build:
    runs-on: macos-14
    needs: prepare-build
    strategy:
      matrix:
        config: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.brew
          ~/.gem
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-nightly-${{ hashFiles('project.yml', 'Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-nightly-
          
    - name: Install dependencies
      run: |
        brew install xcodegen xcbeautify
        gem install fastlane
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Update version and build number
      run: |
        # Update build number using agvtool
        agvtool new-version -all ${{ needs.prepare-build.outputs.build-number }}
        
        # Update marketing version
        agvtool new-marketing-version ${{ needs.prepare-build.outputs.version }}
        
    - name: Build app (${{ matrix.config }})
      run: |
        set -o pipefail
        xcodebuild build \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -configuration ${{ matrix.config }} \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build/${{ matrix.config }} \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          | xcbeautify --renderer github-actions
          
    - name: Run tests (${{ matrix.config }})
      if: github.event.inputs.run_full_suite == 'true' || github.event_name == 'schedule'
      run: |
        set -o pipefail
        xcodebuild test \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -configuration ${{ matrix.config }} \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build/${{ matrix.config }} \
          -enableCodeCoverage YES \
          -testPlan ClaudeCodeTests \
          -resultBundlePath test-results/${{ matrix.config }}-tests.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Run UI tests (${{ matrix.config }})
      if: (github.event.inputs.run_full_suite == 'true' || github.event_name == 'schedule') && matrix.config == 'Debug'
      run: |
        set -o pipefail
        xcodebuild test \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -configuration ${{ matrix.config }} \
          -destination "platform=iOS Simulator,id=${{ env.SIMULATOR_UUID }}" \
          -derivedDataPath build/${{ matrix.config }} \
          -testPlan ClaudeCodeUITests \
          -resultBundlePath test-results/${{ matrix.config }}-ui-tests.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Generate test coverage (${{ matrix.config }})
      if: matrix.config == 'Debug' && (github.event.inputs.run_full_suite == 'true' || github.event_name == 'schedule')
      run: |
        xcov \
          --project ClaudeCode.xcodeproj \
          --scheme ClaudeCode \
          --output_directory coverage/${{ matrix.config }} \
          --derived_data_path build/${{ matrix.config }} \
          --minimum_coverage_percentage 70
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-build-${{ matrix.config }}-${{ needs.prepare-build.outputs.build-date }}
        path: |
          build/${{ matrix.config }}/Build/Products/
          test-results/
          coverage/
        retention-days: 7

  archive-for-distribution:
    runs-on: macos-14
    needs: [prepare-build, nightly-build]
    if: github.event.inputs.build_type != 'development' || github.event.inputs.deploy_to_testflight == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Install dependencies
      run: |
        brew install xcodegen
        gem install fastlane
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Update version and build number
      run: |
        agvtool new-version -all ${{ needs.prepare-build.outputs.build-number }}
        agvtool new-marketing-version ${{ needs.prepare-build.outputs.version }}
        
    - name: Setup code signing
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      run: |
        if [ -n "$MATCH_GIT_URL" ]; then
          fastlane match appstore --readonly || echo "Code signing setup failed - continuing without signing"
        else
          echo "No code signing configured for nightly builds"
        fi
        
    - name: Archive app
      run: |
        set -o pipefail
        xcodebuild archive \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -configuration Release \
          -archivePath build/ClaudeCode-nightly.xcarchive \
          -destination "generic/platform=iOS" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          | xcbeautify --renderer github-actions
          
    - name: Upload archive
      uses: actions/upload-artifact@v4
      with:
        name: nightly-archive-${{ needs.prepare-build.outputs.build-date }}
        path: build/ClaudeCode-nightly.xcarchive
        retention-days: 30

  deploy-testflight:
    runs-on: macos-14
    needs: [prepare-build, archive-for-distribution]
    if: github.event.inputs.deploy_to_testflight == 'true' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download archive
      uses: actions/download-artifact@v4
      with:
        name: nightly-archive-${{ needs.prepare-build.outputs.build-date }}
        path: build
        
    - name: Install Fastlane
      run: gem install fastlane
      
    - name: Export and upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        fastlane beta \
          archive_path:build/ClaudeCode-nightly.xcarchive \
          changelog:"Nightly build ${{ needs.prepare-build.outputs.version }} - $(date '+%Y-%m-%d %H:%M UTC')"

  quality-report:
    runs-on: macos-14
    needs: [prepare-build, nightly-build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: nightly-build-*-${{ needs.prepare-build.outputs.build-date }}
        path: artifacts
        merge-multiple: true
        
    - name: Generate quality report
      run: |
        ./Scripts/quality_checks.sh nightly-report \
          --build-date ${{ needs.prepare-build.outputs.build-date }} \
          --version ${{ needs.prepare-build.outputs.version }} \
          --artifacts-path artifacts
          
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-quality-report-${{ needs.prepare-build.outputs.build-date }}
        path: reports/
        retention-days: 30

  notify-results:
    runs-on: ubuntu-latest
    needs: [prepare-build, nightly-build, archive-for-distribution, deploy-testflight, quality-report]
    if: always()
    
    steps:
    - name: Determine build status
      id: status
      run: |
        if [ "${{ needs.nightly-build.result }}" == "success" ]; then
          echo "status=✅ SUCCESS" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        elif [ "${{ needs.nightly-build.result }}" == "failure" ]; then
          echo "status=❌ FAILED" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        else
          echo "status=⚠️ PARTIAL" >> $GITHUB_OUTPUT
          echo "color=warning" >> $GITHUB_OUTPUT
        fi
        
    - name: Create build summary
      run: |
        echo "## Nightly Build Report 🌙" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Date:** ${{ needs.prepare-build.outputs.build-date }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.prepare-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** ${{ needs.prepare-build.outputs.build-number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- Build & Test: ${{ needs.nightly-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Archive: ${{ needs.archive-for-distribution.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- TestFlight: ${{ needs.deploy-testflight.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Quality Report: ${{ needs.quality-report.result }}" >> $GITHUB_STEP_SUMMARY
        
    # Additional notification options can be added here
    # - Slack notification
    # - Email notification
    # - Discord webhook