name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - testflight
          - appstore
          - both
        default: testflight
      skip_tests:
        description: 'Skip running tests (use with caution)'
        required: false
        default: false
        type: boolean
      create_github_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

env:
  XCODE_VERSION: '15.2'
  FASTLANE_SKIP_UPDATE_CHECK: true
  FASTLANE_HIDE_CHANGELOG: true

jobs:
  validate-release:
    runs-on: macos-14
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        # Validate version format
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Invalid version format. Use semver (e.g., 1.0.0)"
          exit 1
        fi
        
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        
        echo "Release Version: ${VERSION}"
        echo "Build Number: ${BUILD_NUMBER}"
        
    - name: Check if version exists
      run: |
        if git tag | grep -q "^v${{ steps.version.outputs.version }}$"; then
          echo "Warning: Version tag already exists"
        fi

  pre-release-tests:
    runs-on: macos-14
    needs: validate-release
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Install dependencies
      run: |
        brew install xcodegen xcbeautify
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Run full test suite
      run: |
        set -o pipefail
        xcodebuild test \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -destination "platform=iOS Simulator,name=iPhone 16 Pro Max" \
          -derivedDataPath build \
          -enableCodeCoverage YES \
          -resultBundlePath test-results/release-tests.xcresult \
          | xcbeautify --renderer github-actions
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: release-test-results
        path: test-results/
        retention-days: 30

  build-and-archive:
    runs-on: macos-14
    needs: [validate-release, pre-release-tests]
    if: always() && (needs.pre-release-tests.result == 'success' || needs.pre-release-tests.result == 'skipped')
    outputs:
      archive-path: ${{ steps.archive.outputs.path }}
      ipa-path: ${{ steps.export.outputs.ipa-path }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.brew
          ~/.gem
          ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-release-${{ hashFiles('project.yml', 'Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-release-
      
    - name: Install dependencies
      run: |
        brew install xcodegen xcbeautify
        gem install fastlane
        
    - name: Setup provisioning profiles
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
        FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
      run: |
        if [ -n "$MATCH_GIT_URL" ]; then
          fastlane match appstore --readonly
        else
          echo "Warning: No code signing configuration found"
        fi
        
    - name: Generate Xcode project
      run: xcodegen generate
      
    - name: Update version and build number
      run: |
        agvtool new-version -all ${{ needs.validate-release.outputs.build-number }}
        agvtool new-marketing-version ${{ needs.validate-release.outputs.version }}
        
    - name: Archive app
      id: archive
      run: |
        set -o pipefail
        xcodebuild archive \
          -project ClaudeCode.xcodeproj \
          -scheme ClaudeCode \
          -configuration Release \
          -archivePath build/ClaudeCode.xcarchive \
          -destination "generic/platform=iOS" \
          -derivedDataPath build \
          MARKETING_VERSION=${{ needs.validate-release.outputs.version }} \
          CURRENT_PROJECT_VERSION=${{ needs.validate-release.outputs.build-number }} \
          | xcbeautify --renderer github-actions
        echo "path=build/ClaudeCode.xcarchive" >> $GITHUB_OUTPUT
        
    - name: Create export options
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
        </dict>
        </plist>
        EOF
        
    - name: Export IPA
      id: export
      run: |
        xcodebuild -exportArchive \
          -archivePath build/ClaudeCode.xcarchive \
          -exportPath build \
          -exportOptionsPlist ExportOptions.plist
        echo "ipa-path=build/ClaudeCode.ipa" >> $GITHUB_OUTPUT
        
    - name: Upload archive
      uses: actions/upload-artifact@v4
      with:
        name: app-archive-${{ needs.validate-release.outputs.version }}
        path: build/ClaudeCode.xcarchive
        retention-days: 90
        
    - name: Upload IPA
      uses: actions/upload-artifact@v4
      with:
        name: app-ipa-${{ needs.validate-release.outputs.version }}
        path: build/ClaudeCode.ipa
        retention-days: 90
        
  deploy-testflight:
    needs: [validate-release, build-and-archive]
    runs-on: macos-14
    if: github.event.inputs.release_type == 'testflight' || github.event.inputs.release_type == 'both'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download IPA
      uses: actions/download-artifact@v4
      with:
        name: app-ipa-${{ needs.validate-release.outputs.version }}
        path: build
        
    - name: Install Fastlane
      run: gem install fastlane
      
    - name: Generate changelog
      id: changelog
      run: |
        CHANGELOG=$(git log --pretty=format:'â€¢ %s' $(git describe --tags --abbrev=0 HEAD^)..HEAD | head -20)
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="Version ${{ needs.validate-release.outputs.version }} release"
        fi
        echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT
      
    - name: Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
      run: |
        fastlane beta \
          ipa:build/ClaudeCode.ipa \
          changelog:"${{ steps.changelog.outputs.changelog }}" \
          skip_waiting_for_build_processing:true \
          distribute_external:false
          
  deploy-appstore:
    needs: [validate-release, build-and-archive]
    runs-on: macos-14
    if: github.event.inputs.release_type == 'appstore' || github.event.inputs.release_type == 'both'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download IPA
      uses: actions/download-artifact@v4
      with:
        name: app-ipa-${{ needs.validate-release.outputs.version }}
        path: build
        
    - name: Install Fastlane
      run: gem install fastlane
      
    - name: Prepare App Store metadata
      run: |
        # Create metadata directory structure
        mkdir -p fastlane/metadata/en-US
        
        # Generate release notes if they don't exist
        if [ ! -f "fastlane/metadata/en-US/release_notes.txt" ]; then
          echo "Version ${{ needs.validate-release.outputs.version }} release" > fastlane/metadata/en-US/release_notes.txt
        fi
      
    - name: Submit to App Store
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
      run: |
        fastlane release \
          ipa:build/ClaudeCode.ipa \
          skip_metadata:false \
          skip_screenshots:true \
          submit_for_review:true \
          automatic_release:false \
          force:true
          
  create-github-release:
    needs: [validate-release, build-and-archive, deploy-testflight]
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_github_release == 'true') && always() && (needs.deploy-testflight.result == 'success' || needs.deploy-testflight.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download IPA
      uses: actions/download-artifact@v4
      with:
        name: app-ipa-${{ needs.validate-release.outputs.version }}
        path: build
        
    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          RANGE="${LAST_TAG}..HEAD"
        else
          RANGE="HEAD"
        fi
        
        # Generate release notes
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        git log --pretty=format:'* %s (%h)' $RANGE >> release_notes.md
        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...v${{ needs.validate-release.outputs.version }}" >> release_notes.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        name: Release v${{ needs.validate-release.outputs.version }}
        body_path: release_notes.md
        files: |
          build/ClaudeCode.ipa
        draft: false
        prerelease: false
        make_latest: true
        
  post-release-tasks:
    needs: [validate-release, create-github-release]
    runs-on: ubuntu-latest
    if: always() && (needs.create-github-release.result == 'success' || needs.create-github-release.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version for next development cycle
      run: |
        # This could increment version for next development cycle
        # For now, just create a summary
        echo "## Release Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** ${{ needs.validate-release.outputs.build-number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type:** ${{ github.event.inputs.release_type || 'tag-triggered' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "- TestFlight: ${{ needs.deploy-testflight.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- App Store: ${{ needs.deploy-appstore.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub Release: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY